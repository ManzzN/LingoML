import telebot
import re
import json
import logging

from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config import BOT_TOKEN
from data_manager import (
    read_user_data, write_user_data, update_user_score,
    get_user_level, get_persistent_keyboard,
    add_essay_topic, get_user_active_essays, update_essay_topic_status,
    read_essay_topics, write_essay_topics, write_plan_data
)
from messages import MESSAGES, escape_markdown_v2
from openai_client_wrapper import call_llm, extract_json
from scheduler import schedule_notifications

# ===========================================
#     GLOBAL VARIABLES / IN-MEMORY STORAGE
# ===========================================
USER_PARAGRAPHS = {}
USER_STATES = {}
LESSON_SESSIONS = {}
LLM_CHAT_HISTORY = {}
LESSON_RESPONSES = {}
ESSAY_ASSIGNMENT_STATE = {}

# State constants
LANGUAGE_SELECTION = "LANGUAGE"
ASSESSMENT = "ASSESSMENT"
INTRODUCTION = "INTRODUCTION"
LEARNING_MODE = "LEARNING_MODE"
ESSAY_EVALUATION = "ESSAY_EVALUATION"

# Initialize bot
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="MarkdownV2")


@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_id = message.from_user.id
    user_data = read_user_data()

    # If user already introduced name & age, skip setup
    if user_id in user_data and user_data[user_id].get('name') and user_data[user_id].get('age'):
        user_language = user_data[user_id].get('language', 'English')
        messages = {
            "English": "‚úÖ *You have already completed the setup!* No need to restart. You can continue learning.",
            "Russian": "‚úÖ *–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É!* –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
            "Kazakh": "‚úÖ *–°—ñ–∑ –æ—Ä–Ω–∞—Ç—É–¥—ã –∞—è“õ—Ç–∞–¥—ã“£—ã–∑!* –û“õ—É–¥—ã –∂–∞–ª“ì–∞—Å—Ç—ã—Ä–∞ –∞–ª–∞—Å—ã–∑.",
            "Uzbek": "‚úÖ *Siz allaqachon sozlamalarni tugatgansiz!* Davom etishingiz mumkin.",
            "Kyrgyz": "‚úÖ *–û—Ä–Ω–æ—Ç—É—É –±“Ø—Ç–∫”©–Ω!* –û–∫—É—É–Ω—É —É–ª–∞–Ω—Ç–∞ –±–µ—Ä—Å–µ“£–∏–∑ –±–æ–ª–æ—Ç."
        }
        bot.send_message(message.chat.id, escape_markdown_v2(messages[user_language]))
        return

    USER_STATES[user_id] = LANGUAGE_SELECTION
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(
        KeyboardButton("Russian"),
        KeyboardButton("Kazakh"),
        KeyboardButton("English"),
        KeyboardButton("Uzbek"),
        KeyboardButton("Kyrgyz")
    )

    bot.send_message(
        message.chat.id,
        escape_markdown_v2(MESSAGES["welcome"]["English"]),
        reply_markup=keyboard
    )


@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == LANGUAGE_SELECTION)
def process_language(message):
    user_id = message.from_user.id
    language_choice = message.text.strip() if message.text else ""
    allowed_languages = ["English", "Russian", "Kazakh", "Uzbek", "Kyrgyz"]

    if language_choice not in allowed_languages:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for lang in allowed_languages:
            keyboard.add(KeyboardButton(lang))

        bot.send_message(
            message.chat.id,
            escape_markdown_v2("Invalid selection. Please choose one of the provided languages."),
            reply_markup=keyboard
        )
        return

    write_user_data(user_id, language=language_choice)
    bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["send_paragraph"][language_choice]), reply_markup=ReplyKeyboardRemove())
    USER_STATES[user_id] = ASSESSMENT


@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == ASSESSMENT)
def process_assessment(message):
    user_id = message.from_user.id
    user_text = message.text
    USER_PARAGRAPHS[user_id] = user_text

    user_language = read_user_data().get(user_id, {}).get('language', 'English')
    system_prompt = (
        "You are an expert in English proficiency assessment. Use emojis. "
        "Analyze errors in the user's text, provide improvement suggestions, "
        "and ensure that only the final English level is enclosed inside triple backticks like this: ```B2```. "
        f"Respond in {user_language}.\n\n"
        "Assess the following text:\n"
        + user_text
    )

    bot.send_chat_action(message.chat.id, "typing")
    msg = bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["assessing"][user_language]))

    # We‚Äôre going to do a single-call here. 
    # If you want streaming, you can adapt it from your original code.
    try:
        response = call_llm(system_prompt)
        bot.delete_message(message.chat.id, msg.message_id)

        # Extract the proficiency level
        proficiency_level_match = re.search(r'```(.*?)```', response, re.DOTALL)
        proficiency_level = proficiency_level_match.group(1).strip() if proficiency_level_match else "Unknown"

        # Remove the triple backticks content from the text
        assessment_text_without_level = re.sub(r'```.*?```', '', response).strip()

        # Update user data with the assessed level
        write_user_data(user_id, english_level=proficiency_level)

        final_message = (
            f"{escape_markdown_v2(MESSAGES['assessment_results'][user_language])}"
            f"{escape_markdown_v2(assessment_text_without_level)}\n\n"
            f"{escape_markdown_v2(MESSAGES['proficiency_level'][user_language])}*{escape_markdown_v2(proficiency_level)}*"
        )
        bot.send_message(message.chat.id, final_message)

        # Add a keyboard to retake or continue
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        retake_test = {
            "English": "üîÑ Retake Test",
            "Russian": "üîÑ –ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç",
            "Kazakh": "üîÑ –¢–µ—Å—Ç—Ç—ñ “õ–∞–π—Ç–∞ —Ç–∞–ø—Å—ã—Ä—É",
            "Uzbek": "üîÑ Testni qayta topshirish",
            "Kyrgyz": "üîÑ –¢–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞–¥–∞–Ω –±–µ—Ä“Ø“Ø"
        }.get(user_language, "üîÑ Retake Test")

        continue_setup = {
            "English": "‚û°Ô∏è Continue Setup",
            "Russian": "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
            "Kazakh": "‚û°Ô∏è –û—Ä–Ω–∞—Ç—É–¥—ã –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É",
            "Uzbek": "‚û°Ô∏è Sozlamani davom ettirish",
            "Kyrgyz": "‚û°Ô∏è –û—Ä–Ω–æ—Ç—É—É–Ω—É —É–ª–∞–Ω—Ç—É—É"
        }.get(user_language, "‚û°Ô∏è Continue Setup")

        keyboard.add(KeyboardButton(retake_test), KeyboardButton(continue_setup))

        bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["choose_option"][user_language]), reply_markup=keyboard)
    except Exception as e:
        logging.error(str(e))
        bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["error"][user_language]))


@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    user_id = message.from_user.id
    if user_id in USER_STATES:
        USER_STATES.pop(user_id)
    bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["cancel"]["English"]), reply_markup=ReplyKeyboardRemove())


@bot.message_handler(
    func=lambda message: message.text in [
        "‚û°Ô∏è Continue Setup", "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É", "‚û°Ô∏è –û—Ä–Ω–∞—Ç—É–¥—ã –∂–∞–ª“ì–∞—Å—Ç—ã—Ä—É",
        "‚û°Ô∏è Sozlamani davom ettirish", "‚û°Ô∏è –û—Ä–Ω–æ—Ç—É—É–Ω—É —É–ª–∞–Ω—Ç—É—É"
    ]
)
def handle_continue_setup(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, escape_markdown_v2("‚è≥"))
    process_continue_setup(user_id, message.chat.id)


@bot.message_handler(
    func=lambda message: message.text in [
        "üîÑ Retake Test", "üîÑ –ü–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç", "üîÑ –¢–µ—Å—Ç—Ç—ñ “õ–∞–π—Ç–∞ —Ç–∞–ø—Å—ã—Ä—É",
        "üîÑ Testni qayta topshirish", "üîÑ –¢–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞–¥–∞–Ω –±–µ—Ä“Ø“Ø"
    ]
)
def handle_retake_test(message):
    user_id = message.from_user.id
    user_language = read_user_data().get(user_id, {}).get('language', 'English')
    text_msg = {
        "English": "üîÑ *You chose to retake the test.* Please send another paragraph in English.",
        "Russian": "üîÑ *–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–µ—Å–¥–∞—Ç—å —Ç–µ—Å—Ç.* –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π –∞–±–∑–∞—Ü –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.",
        "Kazakh": "üîÑ *–°—ñ–∑ —Ç–µ—Å—Ç—Ç—ñ “õ–∞–π—Ç–∞ —Ç–∞–ø—Å—ã—Ä—É–¥—ã —Ç–∞“£–¥–∞–¥—ã“£—ã–∑.* –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ –±–∞—Å“õ–∞ –∞–±–∑–∞—Ü –∂—ñ–±–µ—Ä—ñ“£—ñ–∑.",
        "Uzbek": "üîÑ *Siz testni qayta topshirishni tanladingiz.* Ingliz tilida yana bir parcha yuboring.",
        "Kyrgyz": "üîÑ *–°–∏–∑ —Ç–µ—Å—Ç—Ç–∏ –∫–∞–π—Ä–∞–¥–∞–Ω –±–µ—Ä“Ø“Ø–Ω“Ø —Ç–∞–Ω–¥–∞–¥—ã“£—ã–∑.* –ê–Ω–≥–ª–∏—Å —Ç–∏–ª–∏–Ω–¥–µ –±–∞—à–∫–∞ –±–∏—Ä –∞–±–∑–∞—Ü –∂–∏–±–µ—Ä–∏–ø –∫”©—Ä“Ø“£“Ø–∑."
    }.get(user_language, "Please send another paragraph in English.")

    bot.send_message(message.chat.id, escape_markdown_v2(text_msg), reply_markup=ReplyKeyboardRemove())
    USER_STATES[user_id] = ASSESSMENT


def process_continue_setup(user_id, chat_id):
    user_data = read_user_data()
    user_language = user_data.get(user_id, {}).get('language', 'English')
    user_paragraph = USER_PARAGRAPHS.get(user_id, "No paragraph provided.")
    level = user_data.get(user_id, {}).get("english_level", "Unknown")

    topics_prompt = (
        "You are an expert in language learning. "
        "Based on the following paragraph provided by the user:\n\n"
        f"{user_paragraph}\n\n"
        f"{level} is their current English proficiency level. "
        "If the user's English level is A1 or A2, mention that these tasks might be too advanced. "
        "Generate a personalized list of topics the user should learn to improve. "
        f"Respond in {user_language}."
    )

    loading_msg = bot.send_message(chat_id, escape_markdown_v2("‚è≥ Generating your personalized list of topics..."))
    response = call_llm(topics_prompt)
    bot.edit_message_text(chat_id=chat_id, message_id=loading_msg.message_id,
                          text=escape_markdown_v2("‚úÖ Personalized topics generated!"))

    bot.send_message(chat_id, f"{escape_markdown_v2(MESSAGES['personalized_topics'].get(user_language))}\n\n{escape_markdown_v2(response)}")

    # Save to plan data
    write_plan_data(user_id, response)

    # Ask user to introduce themselves
    intro_prompts = {
        "English": "Please introduce yourself briefly (include your name and age).",
        "Russian": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—Ä–∞—Ç–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (—É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç).",
        "Kazakh": "”®–∑—ñ“£—ñ–∑–¥—ñ “õ—ã—Å“õ–∞—à–∞ —Ç–∞–Ω—ã—Å—Ç—ã—Ä—ã“£—ã–∑ (–∞—Ç—ã-–∂”©–Ω—ñ“£—ñ–∑–¥—ñ –∂”ô–Ω–µ –∂–∞—Å—ã“£—ã–∑–¥—ã –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑).",
        "Uzbek": "O'zingizni qisqacha tanishtiring (ism va yoshni kiriting).",
        "Kyrgyz": "–ö—ã—Å–∫–∞—á–∞ —Ç–∞–∞–Ω—ã—à—Ç—ã—Ä—ã–ø –∫–æ—é“£—É–∑ (–∞—Ç—ã-–∂”©–Ω“Ø“£“Ø–∑–¥“Ø –∂–∞–Ω–∞ –∂–∞—à—ã“£—ã–∑–¥—ã)."
    }
    bot.send_message(chat_id, escape_markdown_v2(intro_prompts.get(user_language, intro_prompts["English"])))
    USER_STATES[user_id] = INTRODUCTION


@bot.message_handler(func=lambda message: USER_STATES.get(message.from_user.id) == INTRODUCTION)
def process_introduction(message):
    user_id = message.from_user.id
    user_language = read_user_data().get(user_id, {}).get('language', 'English')
    user_intro = message.text

    if not user_intro:
        bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["introduction_error"][user_language]))
        return

    extraction_prompt = (
        "You are an assistant that extracts the user's name and age from this text. "
        "Return them as two strings separated by space: Name Age. "
        "If you cannot find both name and age, return exactly `INVALID_INPUT`."
    )

    response = call_llm(extraction_prompt + "\n\n" + user_intro)
    if "INVALID_INPUT" in response:
        bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["introduction_error"][user_language]))
        return

    parts = response.split()
    if len(parts) >= 2 and parts[1].isdigit():
        name, age = parts[0], parts[1]
        write_user_data(user_id, name=name, age=age)
        confirmation = MESSAGES["introduction_recorded"][user_language].format(name=name, age=age)
        bot.send_message(message.chat.id, escape_markdown_v2(confirmation))
    else:
        bot.send_message(message.chat.id, escape_markdown_v2(MESSAGES["introduction_error"][user_language]))
        return

    # Next step: Show "Finish Setup" button
    finish_button_text = {
        "English": "‚û°Ô∏è Finish setup",
        "Russian": "‚û°Ô∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
        "Kazakh": "‚û°Ô∏è –û—Ä–Ω–∞—Ç—É–¥—ã –∞—è“õ—Ç–∞—É",
        "Uzbek": "‚û°Ô∏è Sozlamani tugatish",
        "Kyrgyz": "‚û°Ô∏è –û—Ä–Ω–æ—Ç—É—É–Ω—É –±“Ø—Ç“Ø—Ä“Ø“Ø"
    }.get(user_language, "‚û°Ô∏è Finish setup")

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(finish_button_text, callback_data="finish_setup"))
    bot.send_message(message.chat.id, escape_markdown_v2("Please proceed to the learning mode when you are ready:"), reply_markup=markup)
    USER_STATES[user_id] = LEARNING_MODE


@bot.callback_query_handler(func=lambda call: call.data == "finish_setup")
def handle_finish_setup(call):
    user_id = call.from_user.id
    user_language = read_user_data().get(user_id, {}).get('language', 'English')

    messages = {
        "English": (
            "‚úÖ *Setup Complete!* You are now ready to begin your learning journey.\n\n"
            "‚è∞ Every day at *2 PM*, you will receive a reminder.\n\n"
            "üí¨ You also have a free conversation mode.\n\n"
            "üéØ *Start your first task:*"
        ),
        "Russian": (
            "‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!* –¢–µ–ø–µ—Ä—å –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ.\n\n"
            "‚è∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ *14:00* –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            "üí¨ –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.\n\n"
            "üéØ *–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:*"
        )
    }
    text = messages.get(user_language, messages["English"])

    task_keyboard = InlineKeyboardMarkup()
    task_keyboard.add(
        InlineKeyboardButton("üéß Listening", callback_data="start_listening"),
        InlineKeyboardButton("üìñ Reading", callback_data="start_reading"),
        InlineKeyboardButton("üìù ESSAY practice", callback_data="generate_new_essay"),
        InlineKeyboardButton("‚úçÔ∏è Writing Assignment", callback_data="start_writing_assignment")
    )

    cancel_reg_text = {
        "English": "‚ùå Cancel Registration",
        "Russian": "‚ùå –ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        "Kazakh": "‚ùå –¢—ñ—Ä–∫–µ—É–¥—ñ “õ–∞–π—Ç–∞–ª–∞—É",
        "Uzbek": "‚ùå Ro'yxatdan o'tishni bekor qilish",
        "Kyrgyz": "‚ùå –ö–∞—Ç—Ç–æ–æ–Ω—É –∫–∞–π—Ä–∞ ”©—Ç–∫”©—Ä“Ø“Ø"
    }.get(user_language, "‚ùå Cancel Registration")

    task_keyboard.add(InlineKeyboardButton(cancel_reg_text, callback_data="cancel_registration"))

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=escape_markdown_v2(text),
        reply_markup=task_keyboard
    )
    USER_STATES.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: call.data == "cancel_registration")
def handle_cancel_registration(call):
    user_id = call.from_user.id
    user_data = read_user_data()
    user_language = user_data.get(user_id, {}).get("language", "English")

    if user_id in user_data:
        del user_data[user_id]
        # Overwrite the entire CSV
        with open("users.csv", mode='w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=['user_id', 'language', 'english_level', 'name', 'age', 'score'])
            writer.writeheader()
            for row in user_data.values():
                writer.writerow(row)

    USER_STATES[user_id] = LANGUAGE_SELECTION

    localized_cancel_msg = {
        "English": "‚úÖ *Your registration has been canceled and all data has been deleted.*",
        "Russian": "‚úÖ *–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.*"
    }
    bot.send_message(call.message.chat.id, escape_markdown_v2(localized_cancel_msg.get(user_language, localized_cancel_msg["English"])))
    # Start again
    cmd_start(call.message)


# ===========================================
#  EXAMPLE: SCHEDULER START (in separate file)
# ===========================================
@bot.message_handler(commands=['run_scheduler'])
def run_scheduler_cmd(message):
    # Start the daily reminder thread
    schedule_notifications(bot)
    bot.send_message(message.chat.id, "Daily notifications have been scheduled at 14:00!")


# (Below would follow your reading lesson, listening lesson logic, essay submission, etc.)
# For brevity, not repeating the entire code block from your original script.
# Add your handlers for "start_listening", "start_reading", "start_vocab", "start_writing_assignment" etc. 
# All are consistent with your original code.

def start_bot():
    print("üöÄ Bot is running...")
    schedule_notifications(bot)  # Optional to start automatically
    bot.infinity_polling()

if __name__ == "__main__":
    start_bot()
